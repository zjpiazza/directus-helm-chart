---
# Directus Helm Chart Values
# This file follows Helm best practices with ergonomic, user-friendly structure

# =============================================================================
# BASIC DEPLOYMENT CONFIGURATION
# =============================================================================

# -- Number of Directus replicas
replicaCount: 1

# -- Deployment strategy
updateStrategy:
  type: RollingUpdate

# -- Docker image configuration
image:
  # -- Directus image repository
  repository: directus/directus
  # -- Image pull policy
  pullPolicy: IfNotPresent
  # -- Image tag (defaults to chart appVersion)
  tag: ""

# -- Image pull secrets
imagePullSecrets: []

# -- Name overrides
nameOverride: ""
fullnameOverride: ""

# =============================================================================
# DATABASE CONFIGURATION
# Simple syntax: database.host: "mydb.com"
# Advanced syntax: database.host: { secretKeyRef: { name: "secret", key: "host" } }
# =============================================================================

database:
  # -- Database client type (mysql, postgresql)
  client: "mysql"

  # -- Database host (auto-generated from dependency charts if empty)
  host: ""

  # -- Database port (auto-detected based on client if empty)
  port: null

  # -- Database name (auto-generated if empty)
  name: ""

  # -- Database username (auto-generated if empty)
  username: ""

  # -- Database password (recommended to use secretKeyRef for security)
  # Example: password: { secretKeyRef: { name: "db-secret", key: "password" } }
  password: ""

# =============================================================================
# ADMIN CONFIGURATION
# =============================================================================

admin:
  # -- Admin email for Directus
  email: "directus-admin@example.com"

# =============================================================================
# DIRECTUS REDIS CONNECTION CONFIGURATION
# Configure how Directus connects to Redis (separate from Redis dependency chart)
# =============================================================================

directusRedis:
  # -- Enable Redis connection
  enabled: true

  # -- Redis host (auto-generated if Redis dependency enabled)
  host: ""

  # -- Redis port
  port: 6379

  # -- Redis username
  username: "default"

  # -- Redis password
  # Example: password: { secretKeyRef: { name: "redis-secret", key: "password" } }
  password: ""

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

application:
  # -- Public URL (auto-generated from ingress if empty)
  publicUrl: ""

# =============================================================================
# SECRETS MANAGEMENT
# =============================================================================

secrets:
  # -- Create application secrets (ADMIN_PASSWORD, SECRET, KEY)
  createApplication: true
  
  # -- Create database secrets for dependency charts
  createDatabase: true

  # -- Application secret configuration
  application:
    name: "directus-application"
    
  # -- Database secret configuration  
  database:
    name: "directus-database"

# -- Attach existing secrets as envFrom
attachExistingSecrets: []

# -- Additional environment variables (for custom env vars)
extraEnv: []
# Examples:
# - name: CUSTOM_VAR
#   value: "custom-value"
# - name: SECRET_VAR
#   valueFrom:
#     secretKeyRef:
#       name: my-secret
#       key: secret-key

# =============================================================================
# KUBERNETES RESOURCES
# =============================================================================

# -- Service account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# -- Pod configuration
podAnnotations: {}
podSecurityContext: {}
securityContext: {}

# -- Service configuration
service:
  type: ClusterIP
  port: 80

# -- Ingress configuration
ingress:
  enabled: false
  enableTLS: true
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# -- Resource limits and requests
resources: {}

# -- Horizontal Pod Autoscaler
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCpuUtilizationPercentage: 80

# -- Health checks
livenessProbe:
  enabled: true
  httpGet:
    path: /
    port: http

readinessProbe:
  enabled: true
  httpGet:
    path: /
    port: http

startupProbe:
  enabled: false
  httpGet:
    path: /
    port: http

# -- Node selection
nodeSelector: {}
tolerations: []
affinity: {}

# -- Volumes
extraVolumes: []
extraVolumeMounts: []

# -- Init containers
initContainers: []

# -- Sidecars
sidecars: []

# =============================================================================
# DEPENDENCY CHARTS (Bitnami charts)
# =============================================================================

# -- MySQL configuration (Bitnami chart)
mysql:
  # -- Enable MySQL installation
  enabled: true
  
  # -- MySQL authentication
  auth:
    # -- Root password (generated if not set)
    rootPassword: ""
    # -- Database name
    database: "directus"
    # -- Database username  
    username: "directus"
    # -- Use existing secret for MySQL passwords
    existingSecret: ""

# -- PostgreSQL configuration (Bitnami chart)
postgresql:
  # -- Enable PostgreSQL installation
  enabled: false
  
  # -- PostgreSQL authentication
  auth:
    # -- Postgres password (generated if not set)
    postgresPassword: ""
    # -- Database name
    database: "directus"
    # -- Database username
    username: "directus"
    # -- Use existing secret for PostgreSQL passwords
    existingSecret: ""

# -- Redis configuration (Bitnami chart) 
# Note: This configures the Redis dependency installation, not Directus Redis connection
# Use directusRedis.* above to configure how Directus connects to Redis
redis:
  # -- Enable Redis installation
  enabled: true
  
  # -- Redis authentication
  auth:
    # -- Enable Redis AUTH
    enabled: true
    # -- Redis password (generated if not set)
    password: ""
    # -- Use existing secret for Redis password
    existingSecret: ""
    existingSecretPasswordKey: ""

  # -- Redis replica configuration
  replica:
    replicaCount: 0

# =============================================================================
# EXTERNAL DATABASE CONFIGURATION
# Use this when connecting to external databases instead of installing dependencies
# =============================================================================

externalDatabase:
  # -- Use external database instead of installing MySQL/PostgreSQL
  enabled: false
  
  # -- Database type (mysql, postgresql)
  type: "mysql"
  
  # -- External database host
  host: ""
  
  # -- External database port
  port: null
  
  # -- External database name
  database: ""
  
  # -- External database username
  username: ""
  
  # -- External database password
  password: ""
  
  # -- Existing secret containing database credentials
  existingSecret: ""
  existingSecretPasswordKey: "password"
  existingSecretUsernameKey: "username"

# =============================================================================
# EXTERNAL REDIS CONFIGURATION  
# =============================================================================

externalRedis:
  # -- Use external Redis instead of installing Redis
  enabled: false
  
  # -- External Redis host
  host: ""
  
  # -- External Redis port
  port: 6379
  
  # -- External Redis username
  username: "default"
  
  # -- External Redis password
  password: ""
  
  # -- Existing secret containing Redis credentials
  existingSecret: ""
  existingSecretPasswordKey: "password"

# =============================================================================
# LEGACY COMPATIBILITY (deprecated - use new structure above)
# =============================================================================

# -- Database engine (deprecated - use database.client instead)
databaseEngine: "mysql"

# -- Admin email (deprecated - use admin.email instead)  
adminEmail: "directus-admin@example.com"

# -- Application secret name (deprecated - use secrets.application.name instead)
applicationSecretName: "directus-application"

# -- Create application secret (deprecated - use secrets.createApplication instead)
createApplicationSecret: true

# -- Create MySQL secret (deprecated - use secrets.createDatabase instead)
createMysqlSecret: true

# -- Create PostgreSQL secret (deprecated - use secrets.createDatabase instead)
createPostgresqlSecret: false

# -- Extra environment variables (deprecated - use extraEnv instead)
extraEnvVars: []