{{- include "directus.validateDatabase" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "directus.fullname" . }}
  labels:
    {{- include "directus.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "directus.selectorLabels" . | nindent 6 }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "directus.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "directus.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.initContainers }}
      initContainers:
        {{- include "directus.render" ( dict "value" .Values.initContainers "context" $ ) | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            {{- range $val := (.Values.attachExistingSecrets | default .Values.extraEnvVars) }}
            - secretRef:
                name: {{ $val }}
            {{- end }}
            - configMapRef:
                name: {{ include "directus.fullname" . }}-configmap
          env:
            # Database configuration with smart value sourcing
            {{- if include "directus.isValueFrom" .Values.database.client }}
            - name: DB_CLIENT
              {{- include "directus.smartEnvValue" (dict "value" .Values.database.client "context" $) | nindent 14 }}
            {{- end }}
            
            {{- if include "directus.isValueFrom" .Values.database.host }}
            - name: DB_HOST
              {{- include "directus.smartEnvValue" (dict "value" .Values.database.host "context" $) | nindent 14 }}
            {{- else if .Values.mysql.external.enabled }}
            {{- if include "directus.isValueFrom" .Values.mysql.external.host }}
            - name: DB_HOST
              {{- include "directus.smartEnvValue" (dict "value" .Values.mysql.external.host "context" $) | nindent 14 }}
            {{- end }}
            {{- else if .Values.postgresql.external.enabled }}
            {{- if include "directus.isValueFrom" .Values.postgresql.external.host }}
            - name: DB_HOST
              {{- include "directus.smartEnvValue" (dict "value" .Values.postgresql.external.host "context" $) | nindent 14 }}
            {{- end }}
            {{- end }}
            
            {{- if include "directus.isValueFrom" .Values.database.port }}
            - name: DB_PORT
              {{- include "directus.smartEnvValue" (dict "value" .Values.database.port "context" $) | nindent 14 }}
            {{- else if .Values.mysql.external.enabled }}
            {{- if include "directus.isValueFrom" .Values.mysql.external.port }}
            - name: DB_PORT
              {{- include "directus.smartEnvValue" (dict "value" .Values.mysql.external.port "context" $) | nindent 14 }}
            {{- end }}
            {{- else if .Values.postgresql.external.enabled }}
            {{- if include "directus.isValueFrom" .Values.postgresql.external.port }}
            - name: DB_PORT
              {{- include "directus.smartEnvValue" (dict "value" .Values.postgresql.external.port "context" $) | nindent 14 }}
            {{- end }}
            {{- end }}
            
            {{- if include "directus.isValueFrom" .Values.database.name }}
            - name: DB_DATABASE
              {{- include "directus.smartEnvValue" (dict "value" .Values.database.name "context" $) | nindent 14 }}
            {{- else if .Values.mysql.external.enabled }}
            {{- if include "directus.isValueFrom" .Values.mysql.external.database }}
            - name: DB_DATABASE
              {{- include "directus.smartEnvValue" (dict "value" .Values.mysql.external.database "context" $) | nindent 14 }}
            {{- end }}
            {{- else if .Values.postgresql.external.enabled }}
            {{- if include "directus.isValueFrom" .Values.postgresql.external.database }}
            - name: DB_DATABASE
              {{- include "directus.smartEnvValue" (dict "value" .Values.postgresql.external.database "context" $) | nindent 14 }}
            {{- end }}
            {{- end }}
            
            {{- if include "directus.isValueFrom" .Values.database.username }}
            - name: DB_USER
              {{- include "directus.smartEnvValue" (dict "value" .Values.database.username "context" $) | nindent 14 }}
            {{- else }}
            # Database username fallback logic
            {{- if .Values.mysql.external.enabled }}
            {{- if .Values.mysql.external.existingSecret }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.external.existingSecret }}
                  key: {{ .Values.mysql.external.existingSecretUsernameKey | default "username" }}
            {{- else if include "directus.isValueFrom" .Values.mysql.external.username }}
            - name: DB_USER
              {{- include "directus.smartEnvValue" (dict "value" .Values.mysql.external.username "context" $) | nindent 14 }}
            {{- end }}
            {{- else if .Values.postgresql.external.enabled }}
            {{- if .Values.postgresql.external.existingSecret }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.external.existingSecret }}
                  key: {{ .Values.postgresql.external.existingSecretUsernameKey | default "username" }}
            {{- else if include "directus.isValueFrom" .Values.postgresql.external.username }}
            - name: DB_USER
              {{- include "directus.smartEnvValue" (dict "value" .Values.postgresql.external.username "context" $) | nindent 14 }}
            {{- end }}
            {{- end }}
            {{- end }}

            {{- if include "directus.isValueFrom" .Values.database.password }}
            - name: DB_PASSWORD
              {{- include "directus.smartEnvValue" (dict "value" .Values.database.password "context" $) | nindent 14 }}
            {{- else }}
            # Database password fallback logic
            {{- if .Values.mysql.external.enabled }}
            {{- if .Values.mysql.external.existingSecret }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.external.existingSecret }}
                  key: {{ .Values.mysql.external.existingSecretPasswordKey | default "password" }}
            {{- else if include "directus.isValueFrom" .Values.mysql.external.password }}
            - name: DB_PASSWORD
              {{- include "directus.smartEnvValue" (dict "value" .Values.mysql.external.password "context" $) | nindent 14 }}
            {{- else if include "directus.getValue" .Values.mysql.external.password }}
            - name: DB_PASSWORD
              value: {{ include "directus.getValue" .Values.mysql.external.password | quote }}
            {{- end }}
            {{- else if .Values.postgresql.external.enabled }}
            {{- if .Values.postgresql.external.existingSecret }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.external.existingSecret }}
                  key: {{ .Values.postgresql.external.existingSecretPasswordKey | default "password" }}
            {{- else if include "directus.isValueFrom" .Values.postgresql.external.password }}
            - name: DB_PASSWORD
              {{- include "directus.smartEnvValue" (dict "value" .Values.postgresql.external.password "context" $) | nindent 14 }}
            {{- else if include "directus.getValue" .Values.postgresql.external.password }}
            - name: DB_PASSWORD
              value: {{ include "directus.getValue" .Values.postgresql.external.password | quote }}
            {{- end }}
            {{- else if eq (include "directus.getValue" .Values.database.client | default .Values.databaseEngine) "mysql" }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.auth.existingSecret | default (printf "%s-mysql" .Release.Name) }}
                  key: mysql-password
            {{- else if eq (include "directus.getValue" .Values.database.client | default .Values.databaseEngine) "postgresql" }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.auth.existingSecret | default (printf "%s-postgresql" .Release.Name) }}
                  key: password
            {{- end }}
            {{- end }}

            # Admin configuration
            {{- if include "directus.isValueFrom" .Values.admin.email }}
            - name: ADMIN_EMAIL
              {{- include "directus.smartEnvValue" (dict "value" .Values.admin.email "context" $) | nindent 14 }}
            {{- end }}

            # Redis configuration with smart value sourcing
            {{- if include "directus.isValueFrom" .Values.directusRedis.enabled }}
            - name: REDIS_ENABLED
              {{- include "directus.smartEnvValue" (dict "value" .Values.directusRedis.enabled "context" $) | nindent 14 }}
            {{- end }}

            {{- if include "directus.isValueFrom" .Values.directusRedis.host }}
            - name: REDIS_HOST
              {{- include "directus.smartEnvValue" (dict "value" .Values.directusRedis.host "context" $) | nindent 14 }}
            {{- end }}
            
            {{- if include "directus.isValueFrom" .Values.directusRedis.port }}
            - name: REDIS_PORT
              {{- include "directus.smartEnvValue" (dict "value" .Values.directusRedis.port "context" $) | nindent 14 }}
            {{- end }}
            
            {{- if include "directus.isValueFrom" .Values.directusRedis.username }}
            - name: REDIS_USERNAME
              {{- include "directus.smartEnvValue" (dict "value" .Values.directusRedis.username "context" $) | nindent 14 }}
            {{- end }}

            {{- if include "directus.isValueFrom" .Values.directusRedis.password }}
            - name: REDIS_PASSWORD
              {{- include "directus.smartEnvValue" (dict "value" .Values.directusRedis.password "context" $) | nindent 14 }}
            {{- else if include "directus.getValue" .Values.directusRedis.enabled }}
            # Redis password fallback logic
            {{- if .Values.externalRedis.enabled }}
            {{- if .Values.externalRedis.existingSecret }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalRedis.existingSecret }}
                  key: {{ .Values.externalRedis.existingSecretPasswordKey | default "password" }}
            {{- else if .Values.externalRedis.password }}
            - name: REDIS_PASSWORD
              value: {{ .Values.externalRedis.password | quote }}
            {{- end }}
            {{- else if .Values.redis.enabled }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.auth.existingSecret | default (printf "%s-redis" .Release.Name) }}
                  key: {{ .Values.redis.auth.existingSecretPasswordKey | default "redis-password" }}
            {{- end }}
            {{- end }}

            # Application URL
            {{- if include "directus.isValueFrom" .Values.application.publicUrl }}
            - name: PUBLIC_URL
              {{- include "directus.smartEnvValue" (dict "value" .Values.application.publicUrl "context" $) | nindent 14 }}
            {{- end }}

            # Application secrets
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.application.name | default .Values.applicationSecretName | default "directus-application" }}
                  key: ADMIN_PASSWORD
            - name: SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.application.name | default .Values.applicationSecretName | default "directus-application" }}
                  key: SECRET
            - name: KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.application.name | default .Values.applicationSecretName | default "directus-application" }}
                  key: KEY

            # Extra environment variables
            {{- if .Values.extraEnv }}
            {{- toYaml .Values.extraEnv | nindent 12 }}
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- tpl (toYaml .Values.extraEnvVars) $ | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: 8055
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- toYaml (omit .Values.livenessProbe "enabled") | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- toYaml (omit .Values.readinessProbe "enabled") | nindent 12 }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            {{- toYaml (omit .Values.startupProbe "enabled") | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
        {{- if .Values.sidecars }}
        {{- include "directus.render" ( dict "value" .Values.sidecars "context" $ ) | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.extraVolumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}